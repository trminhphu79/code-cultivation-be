services:
  nats:
    container_name: nats
    restart: always
    image: nats:latest
    ports:
      - ${NATS_PORT}:${NATS_PORT}
      - ${NATS_INTER_PORT}:${NATS_INTER_PORT}
    networks:
      - microservice-network
      - database-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command:
      - redis-server
      - --requirepass
      - ${REDIS_PASSWORD}
    networks:
      - microservice-network

  postgres:
    container_name: postgres
    restart: always
    image: postgres:13.18
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - /var/lib/postgres-data:/data/postgres
    networks:
      - microservice-network
      - database-network
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    mem_limit: 1g
    cpus: 0.5

  api-gateway:
    container_name: api-gateway
    ports:
      - ${PORT}:${PORT}
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    image: api-gateway:latest
    networks:
      - microservice-network
      - database-network
    environment:
      NATS_URL: ${NATS_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_POOL: ${POSTGRES_MAX_POOL}
      POSTGRES_MIN_POOL: ${POSTGRES_MIN_POOL}
      POSTGRES_IDLE_TIMEOUT: ${POSTGRES_IDLE_TIMEOUT}
      POSTGRES_ACQUIRE_TIMEOUT: ${POSTGRES_ACQUIRE_TIMEOUT}
      POSTGRES_DB: ${POSTGRES_DB}
      SALT_ROUNDS: ${SALT_ROUNDS}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY}
      REDIS_URL: ${REDIS_URL}

    depends_on:
      - nats
      - postgres
      - redis

  account:
    container_name: account
    build:
      context: .
      dockerfile: ./apps/account/Dockerfile
    image: account:latest
    networks:
      - microservice-network
      - database-network
    environment:
      NATS_URL: ${NATS_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_POOL: ${POSTGRES_MAX_POOL}
      POSTGRES_MIN_POOL: ${POSTGRES_MIN_POOL}
      POSTGRES_IDLE_TIMEOUT: ${POSTGRES_IDLE_TIMEOUT}
      POSTGRES_ACQUIRE_TIMEOUT: ${POSTGRES_ACQUIRE_TIMEOUT}
      SALT_ROUNDS: ${SALT_ROUNDS}

      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY}

      REDIS_URL: ${REDIS_URL}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_AUTHORIZE_URL: ${GITHUB_AUTHORIZE_URL}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_USER_INFO_URL: ${GITHUB_USER_INFO_URL}

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      VERIFY_EMAIL_REDIRECT: ${VERIFY_EMAIL_REDIRECT}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USER: ${MAIL_USER}
      MAIL_PASS: ${MAIL_PASS}
      MAIL_FROM: ${MAIL_FROM}
    depends_on:
      - nats
      - postgres
      - redis

  core:
    container_name: core
    build:
      context: .
      dockerfile: ./apps/core/Dockerfile
    image: core:latest
    networks:
      - microservice-network
      - database-network
    environment:
      NATS_URL: ${NATS_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_POOL: ${POSTGRES_MAX_POOL}
      POSTGRES_MIN_POOL: ${POSTGRES_MIN_POOL}
      POSTGRES_IDLE_TIMEOUT: ${POSTGRES_IDLE_TIMEOUT}
      POSTGRES_ACQUIRE_TIMEOUT: ${POSTGRES_ACQUIRE_TIMEOUT}
      IMAGE_KIT_ENDPOINT: ${IMAGE_KIT_ENDPOINT}
      IMAGE_KIT_PUBLIC_KEY: ${IMAGE_KIT_PUBLIC_KEY}
      IMAGE_KIT_PRIVATE_KEY: ${IMAGE_KIT_PRIVATE_KEY}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      - nats
      - postgres
      - redis

  activity:
    container_name: activity
    build:
      context: .
      dockerfile: ./apps/activity/Dockerfile
    image: core:latest
    networks:
      - microservice-network
      - database-network
    environment:
      NATS_URL: ${NATS_URL}
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      WS_PORT: ${WS_PORT}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      - nats
      - redis

networks:
  database-network: {}
  microservice-network: {}

volumes:
  redis-data:
